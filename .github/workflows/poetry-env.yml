name: Poetry Environment

on:
  workflow_dispatch:
    inputs:
      operator:
        description: 'dbt-operator to work with'
        required: true
        default: 'dbt-operator'
        type: choice
        options:
          - dbt
          - dbt-core-operator
          - dbt-postgres-operator
      action:
        description: 'Poetry action to perform'
        required: true
        default: 'install'
        type: choice
        options:
          - install
          - update
          - check
          - shell
          - clean

env:
  OPERATOR_NAME: ${{ github.event.inputs.operator || 'dbt' }}

jobs:
  poetry-action:
    runs-on: self-hosted
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.7.1
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: ${{ env.OPERATOR_NAME }}/.venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

    - name: Execute Poetry action
      run: |
        cd ${{ env.OPERATOR_NAME }}
        case "${{ github.event.inputs.action }}" in
          "install")
            echo "Installing Poetry dependencies..."
            poetry install --no-interaction --no-root
            ;;
          "update")
            echo "Updating Poetry dependencies..."
            poetry update --no-interaction
            ;;
          "check")
            echo "Checking Poetry configuration..."
            poetry check
            poetry env info
            ;;
          "shell")
            echo "Poetry shell would be activated here"
            poetry env info
            ;;
          "clean")
            echo "Cleaning Poetry environment..."
            poetry cache clear --all pypi
            rm -rf .venv
            ;;
        esac

    - name: Show Poetry environment info
      if: github.event.inputs.action != 'clean'
      run: |
        cd ${{ env.OPERATOR_NAME }}
        poetry env info
        poetry show --tree
